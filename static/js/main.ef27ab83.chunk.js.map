{"version":3,"sources":["components/welcome/Welcome.js","components/clock/Clock.js","components/contact/Contact.js","components/navigation/Navigation.js","components/jeopardyService.js","components/jeopardy/Jeopardy.js","components/error/Error.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","props","className","name","Clock","state","date","Date","this","timerId","setInterval","tick","clearInterval","setState","toLocaleTimeString","Component","Contact","handleChange","event","formData","target","value","handleSubmit","preventDefault","submitted","resetForm","firstName","lastName","onClick","onSubmit","htmlFor","type","onChange","Navigation","to","JeopardyService","url","client","axios","create","get","Jeopardy","handleAnswerChange","data","answer","score","getQuestion","then","result","getNewQuestion","undefined","category","clickHandler","placeholder","title","question","Error","App","exact","path","render","match","params","component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ef27ab83.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Welcome(props) {\r\n    return (\r\n        <div className=\"Welcome\">\r\n            Welcome, {props.name}!\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Welcome;","import React, { Component } from 'react';\r\n\r\nclass Clock extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            date: new Date()\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timerId = setInterval(() => this.tick(), 1000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerId);\r\n    }\r\n\r\n    tick() {\r\n        this.setState({\r\n            date: new Date()\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render () {\r\n        return (\r\n    <div className=\"Clock\">\r\n        <h2>It is {this.state.date.toLocaleTimeString()}</h2>\r\n    </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Clock;","import React, { Component } from 'react';\r\n\r\nclass Contact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            submitted: false,\r\n            formData: {\r\n                firstName: '',\r\n                lastName: ''\r\n            }\r\n        };\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const formData = {...this.state.formData};\r\n        formData[event.target.name] = event.target.value;\r\n\r\n        this.setState({ formData });\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        this.setState({\r\n            submitted: true\r\n        });\r\n    }\r\n\r\n    resetForm = (event) => {\r\n        this.setState({\r\n            submitted: false,\r\n            formData: {\r\n                firstName: '',\r\n                lastName: ''\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        if(this.state.submitted) {\r\n            return (\r\n                <div className=\"Contact\">\r\n                    <p>Thank you, {this.state.formData.firstName}, for submitting the form.</p>\r\n                    <button onClick={this.resetForm}>Reset Form</button>\r\n                </div>\r\n            )\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"Contact\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div>\r\n                        <label htmlFor=\"firstName\">First Name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"firstName\"\r\n                            value={this.state.formData.firstName}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"lastName\">Last name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"lastName\"\r\n                            value={this.state.formData.lastName}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <button>Submit Form</button>\r\n                </form>\r\n\r\n                <div>\r\n                    {this.state.formData.firstName}\r\n                    <br />\r\n                    {this.state.formData.lastName}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Navigation(props) {\r\n    return (\r\n        <div className=\"Navigation\">\r\n            <ul>\r\n                <li><Link to=\"/\">Home</Link></li>\r\n                <li><Link to=\"/clock\">Clock</Link></li>\r\n                <li><Link to=\"/contact\">Contact</Link></li>\r\n                <li><Link to=\"/jeopardy\">Jeopardy</Link></li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navigation;","//import the axios HTTP client to communicate with the API\r\nimport axios from 'axios';\r\nclass JeopardyService {\r\n    constructor(url = 'http://jservice.io/api/random', client = axios.create()){\r\n        this.url = url;\r\n        this.client = client;\r\n    }\r\n    getQuestion(){\r\n        return this.client.get(this.url);\r\n    }\r\n}\r\nexport default JeopardyService;","import React, { Component } from 'react';\r\n//import our service\r\nimport JeopardyService from \"../jeopardyService\";\r\nclass Jeopardy extends Component {\r\n  //set our initial state and set up our service as this.client on this component\r\n  constructor(props){\r\n    super(props);\r\n    this.client = new JeopardyService();\r\n    this.state = {\r\n      data: {},\r\n      score: 0,\r\n    }\r\n  }\r\n\r\n  handleAnswerChange = (event) => {\r\n    if(this.state.data.answer === true) {\r\n      return (this.state.score + this.state.data.value)\r\n    }else {\r\n      return (this.state.score - this.state.data.value)\r\n    }\r\n  }\r\n\r\n  //get a new random question from the API and add it to the data object in state\r\n  getNewQuestion() {\r\n    return this.client.getQuestion().then(result => {\r\n      this.setState({\r\n        data: result.data[0]\r\n      })\r\n    })\r\n  }\r\n  //when the component mounts, get a the first question\r\n  componentDidMount() {\r\n    this.getNewQuestion();\r\n  }\r\n  //display the results on the screen\r\n  render() {\r\n      if(this.state.data.category === undefined) {\r\n          return (\r\n              <div>\r\n                  <h1>Loading...</h1>\r\n              </div>\r\n          )\r\n        }\r\n        \r\n    \r\n    return (\r\n      <div>\r\n        <strong>Answer: </strong> <form onSubmit={this.clickHandler}>\r\n            <input type='text' value={this.state.answer} onChange={this.handleAnswerChange} placeholder='Your Answer' /> <br/>\r\n            <p></p><button onClick={this.handleAnswerChange}>Submit Answer</button><p/><br/>\r\n            \r\n            </form> <br/>\r\n        \r\n        <strong>User Score: </strong> {(this.state.score)} <br/>\r\n\r\n        <strong>Category: </strong> {(this.state.data.category.title)} <br/>\r\n\r\n        <strong>Question: </strong> {(this.state.data.question)} <br/>\r\n\r\n        <strong>Point Value: </strong> {(this.state.data.value)} <br/>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\nexport default Jeopardy;","import React from 'react';\r\n\r\nfunction Error(props) {\r\n    return (\r\n        <div className=\"Error\">\r\n            <h1>Error 404 No Match Found</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Error;","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Welcome from './components/welcome/Welcome';\nimport Clock from './components/clock/Clock';\nimport Contact from './components/contact/Contact';\nimport Navigation from './components/navigation/Navigation';\nimport Jeopardy from './components/jeopardy/Jeopardy';\nimport Error from './components/error/Error';\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n    <div className=\"App\">\n     <Navigation />\n     \n     <Switch>\n     <Route \n     exact \n     path=\"/\" exact \n     render={(props) => <Welcome {...props} name=\"Darius\" />} \n     />\n     <Route exact \n     path=\"/welcome/:name\" \n     render={(props) => <Welcome {...props} name={props.match.params.name} />} />\n     <Route exact path=\"/clock\" exact component={Clock}/>\n     <Route exact path=\"/contact\" exact component={Contact}/>\n     <Route exact path=\"/jeopardy\" exact component={Jeopardy} />\n     <Route exact component={Error} />\n    </Switch>\n    </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}